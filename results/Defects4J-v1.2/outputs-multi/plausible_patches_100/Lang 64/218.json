{
  "correct": false,
  "plausible": true,
  "hunks": [
    {
      "hunk": 0,
      "source": "",
      "patch": "super.compareTo(other);",
      "target": "if (other == this) { return 0; } if (other.getClass() != this.getClass()) { if (other.getClass().getName().equals(this.getClass().getName())) { return iValue - getValueInOtherClassLoader(other); } throw new ClassCastException( \"Different enum class '\" + ClassUtils.getShortClassName(other.getClass()) + \"'\"); }",
      "exact_match": false
    },
    {
      "hunk": 1,
      "source": "",
      "patch": "",
      "target": "private int getValueInOtherClassLoader(Object other) { try { Method mth = other.getClass().getMethod(\"getValue\", null); Integer value = (Integer) mth.invoke(other, null); return value.intValue(); } catch (NoSuchMethodException e) {  } catch (IllegalAccessException e) {  } catch (InvocationTargetException e) {  } throw new IllegalStateException(\"This should not happen\"); }",
      "exact_match": false
    }
  ]
}